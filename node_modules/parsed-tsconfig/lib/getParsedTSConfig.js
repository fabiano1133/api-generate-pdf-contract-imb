"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const getTsConfigPath_1 = __importDefault(require("./getTsConfigPath"));
const formatDiagnostic_1 = __importDefault(require("./formatDiagnostic"));
/**
 * Structured tsconfig configuration
 * @param cwd
 * @return {Partial<ParsedCommandLine>}
 */
function getParsedTSConfig(cwd) {
    try {
        function parseTsconfig(path) {
            var _a, _b;
            const { readConfigFile, sys, parseJsonConfigFileContent, } = require("typescript");
            const result = readConfigFile(path, sys.readFile);
            if (result === null || result === void 0 ? void 0 : result.error) {
                console.log((0, formatDiagnostic_1.default)(result.error));
                return;
            }
            const parsed = parseJsonConfigFileContent(result.config, {
                useCaseSensitiveFileNames: false,
                readDirectory: sys.readDirectory,
                fileExists: sys.fileExists,
                readFile: sys.readFile,
            }, (0, path_1.dirname)(path));
            if ((_a = parsed === null || parsed === void 0 ? void 0 : parsed.errors) === null || _a === void 0 ? void 0 : _a.length) {
                console.log((0, formatDiagnostic_1.default)((_b = parsed === null || parsed === void 0 ? void 0 : parsed.errors) === null || _b === void 0 ? void 0 : _b[0]));
                return;
            }
            return parsed;
        }
        return parseTsconfig((0, getTsConfigPath_1.default)(cwd)) || {};
    }
    catch (e) {
        return {};
    }
}
exports.default = getParsedTSConfig;
