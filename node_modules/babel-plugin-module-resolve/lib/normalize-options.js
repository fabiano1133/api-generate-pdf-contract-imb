"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var parsed_tsconfig_1 = __importDefault(require("parsed-tsconfig"));
var enhanced_resolve_1 = require("enhanced-resolve");
var utils_1 = require("./utils");
var defaultExtensions = ['.js', '.jsx', '.es', '.es6', '.mjs', '.ts', '.tsx'];
function getAdditionalModulePaths() {
    var tsConfigPath = path_1["default"].join(this.cwd, 'tsconfig.json');
    var jsConfigPath = path_1["default"].join(this.cwd, 'jsconfig.json');
    var config;
    var hasTsConfig = fs_1["default"].existsSync(tsConfigPath);
    var hasJsConfig = fs_1["default"].existsSync(jsConfigPath);
    if (hasTsConfig) {
        var options_1 = parsed_tsconfig_1["default"](this.cwd).options;
        config = {
            compilerOptions: __assign({}, options_1)
        };
    }
    else if (hasJsConfig) {
        config = require(jsConfigPath);
    }
    var options = (config === null || config === void 0 ? void 0 : config.compilerOptions) || {};
    if (!options.baseUrl) {
        return {};
    }
    var baseUrl = utils_1.toPosixPath(path_1["default"].resolve(this.cwd, options.baseUrl));
    var paths = options.paths || {};
    var alias = {};
    for (var key in paths) {
        var val = paths[key];
        var k = key.replace('/*', '');
        if (typeof val === 'string') {
            alias[k] = utils_1.toPosixPath(path_1["default"].resolve(baseUrl, val)).replace('/*', '');
        }
        if (Array.isArray(val)) {
            alias[k] = val.map(function (v) { return utils_1.toPosixPath(path_1["default"].resolve(baseUrl, v)).replace('/*', ''); });
        }
    }
    return {
        baseUrl: baseUrl,
        alias: alias
    };
}
function normalizeOptions() {
    var opts = (this.opts || {});
    var _a = getAdditionalModulePaths.call(this), baseUrl = _a.baseUrl, _alias = _a.alias;
    var alias = opts.alias ||
        _alias || {
        '@': path_1["default"].join(this.cwd)
    };
    return __assign(__assign({ roots: [this.cwd, baseUrl], extensions: defaultExtensions, fileSystem: new enhanced_resolve_1.CachedInputFileSystem(fs_1["default"]) }, this.opts), { alias: alias });
}
exports["default"] = normalizeOptions;
