"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.createResolver = void 0;
var path_1 = __importDefault(require("path"));
var enhanced_resolve_1 = require("enhanced-resolve");
var deasync_1 = __importDefault(require("deasync"));
var utils_1 = require("./utils");
function createResolver(resolveOptions) {
    return enhanced_resolve_1.ResolverFactory.createResolver(resolveOptions);
}
exports.createResolver = createResolver;
function resolve(node, state) {
    var filePath = state.file.opts.filename;
    if (utils_1.isRelativePath(node.value)) {
        return;
    }
    var result = tryCall([
        // Common module processing will go through here
        function () {
            var result = resolveSync(state, filePath, node.value);
            if (state.cwd.startsWith(result.descriptionFileRoot)) {
                return result.path;
            }
            return false;
        },
        function () {
            // Directly using the root directory folder as a direct import will go through here
            var dir = path_1["default"].parse(filePath).dir;
            var realPath;
            // assuming to be in the root directory
            [state.cwd, dir].some(function (v) {
                try {
                    realPath = resolveSync(state, v, "./" + node.value).path;
                    return true;
                }
                catch (e) {
                    return false;
                }
            });
            // process current project
            if (realPath && realPath.startsWith(state.cwd)) {
                return realPath;
            }
            // if there are other ...
            return false;
        },
    ]);
    if (result) {
        var _a = path_1["default"].parse(filePath), dir = _a.dir, ext = _a.ext;
        if (path_1["default"].parse(result).ext === ext) {
            result = result.replace(ext, '');
        }
        node.value = utils_1.toLocalPath(utils_1.toPosixPath(path_1["default"].relative(dir, result)));
    }
}
/**
 * If return false, stop loop return undefined
 * @param fns
 */
function tryCall(fns) {
    var lastErr;
    for (var _i = 0, fns_1 = fns; _i < fns_1.length; _i++) {
        var fn = fns_1[_i];
        try {
            var res = fn();
            if (res === false)
                return;
            return res;
        }
        catch (e) {
            lastErr = e;
        }
    }
    throw lastErr;
}
function resolveSync(state, path, request) {
    var fn = function (context, path, request, resolveContext, callback) {
        return state.resolver.resolve(context, path, request, resolveContext, function (err, path, rsp) {
            callback(err, rsp);
        });
    };
    return deasync_1["default"](fn)({}, path, request, {});
}
exports["default"] = resolve;
