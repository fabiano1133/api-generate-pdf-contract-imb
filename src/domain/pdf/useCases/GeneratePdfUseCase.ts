import { PdfProvider } from "../../../utils/pdfProvider/PdfProvider";
import { ContractDataDTO } from "../dtos/ContractDataDTO";

export class GeneratePdfUseCase {
    async execute({
        valorMensalAluguelEscrito, 
        locador, 
        cpfLocador, 
        estadoCivilLocador, 
        profissaoLocador, 
        rgLocador, 
        locatario,
        cpfLocatario, 
        estadoCivilLocatario, 
        profissaoLocatario, 
        rgLocatario, 
        nomeConjuge, 
        cpfConjuge, 
        finalidade,
        objContrato,
        endObjeto,
        numObjeto,
        bairroObjeto,
        cidadeObjeto,
        ufObjeto,
        cepObjeto,
        nacionalidadeLocador,
        orgaoExpedidor,
        ufExpedicao,
        ruaLocador,
        numLocador,
        compLocador,
        bairroLocador,
        cepLocador,
        nacionalidadeLocatario,
        orgaoExpedidorLocatario,
        ufExpedicaoLocatario,
        ruaLocatario,
        numLocatario,
        compLocatario,
        bairroLocatario,
        ufLocatario,
        cepLocatario,
        cidadeLocatario,
        ufLocador,
        cidadeLocador,
        nomeCorretor,
        nacionalidadeCorretor,
        estadoCivilCorretor,
        profissaoCorretor,
        cpfCorretor,
        rgCorretor,
        orgaoExpedidorCorretor,
        ufExpedicaoCorretor,
        numCreci,
        ruaCorretor,
        numCorretor,
        cepCorretor,
        bairroCorretor,
        cidadeCorretor,
        ufCorretor,
        valorServicoCorretor,
        valorServicoEscrito,
        bancoCorretor,
        agCorretor,
        contaCorretor,
        pixCorretor,
        prazoVigencia,
        inicio,
        termino,
        valorMensal,
        vencimento,
        finalidadeLocacao,
        valorGarantiaCaucao,
        diaVencimento,
        ciaEletrica,
        bancoLocador,
        agLocador,
        contaLocador,
        titularConta,
        date,
    }: ContractDataDTO): Promise<any> {
        
    const pdfProvider = new PdfProvider()

    const pdf = await pdfProvider.generate({
        valorMensalAluguelEscrito,
        locador, 
        cpfLocador, 
        estadoCivilLocador, 
        profissaoLocador, 
        rgLocador, 
        locatario,
        cpfLocatario, 
        estadoCivilLocatario, 
        profissaoLocatario, 
        rgLocatario, 
        nomeConjuge, 
        cpfConjuge, 
        finalidade,
        objContrato,
        endObjeto,
        numObjeto,
        bairroObjeto,
        cidadeObjeto,
        ufObjeto,
        cepObjeto,
        nacionalidadeLocador,
        orgaoExpedidor,
        ufExpedicao,
        ruaLocador,
        numLocador,
        compLocador,
        bairroLocador,
        cepLocador,
        nacionalidadeLocatario,
        orgaoExpedidorLocatario,
        ufExpedicaoLocatario,
        ruaLocatario,
        numLocatario,
        compLocatario,
        bairroLocatario,
        ufLocatario,
        cepLocatario,
        cidadeLocatario,
        ufLocador,
        cidadeLocador,
        nomeCorretor,
        nacionalidadeCorretor,
        estadoCivilCorretor,
        profissaoCorretor,
        cpfCorretor,
        rgCorretor,
        orgaoExpedidorCorretor,
        ufExpedicaoCorretor,
        numCreci,
        ruaCorretor,
        numCorretor,
        cepCorretor,
        bairroCorretor,
        cidadeCorretor,
        ufCorretor,
        valorServicoCorretor,
        valorServicoEscrito,
        bancoCorretor,
        agCorretor,
        contaCorretor,
        pixCorretor,
        prazoVigencia,
        inicio,
        termino,
        valorMensal,
        vencimento,
        finalidadeLocacao,
        valorGarantiaCaucao,
        diaVencimento,
        ciaEletrica,
        bancoLocador,
        agLocador,
        contaLocador,
        titularConta,
        date,
    })
    return pdf
    }
}